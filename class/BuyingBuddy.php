<?phpif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly   /** * BuyingBuddy *  * @author Alan Groarke * @author Mike Camire * @version 1.2 * @license Buying Buddy https://buyingbuddy.com * @copyright 2015-2023 Blue Fire Group *  */class BuyingBuddy {    /**     * URL to the BuyingBuddy API     * @var string     */    protected $baseURL;    /**     * Default parameters to post with CURL     * @var array     */    protected $configOptions;    /**     * Set base parameters including api key (required) and acid (requied)     * @param string API key for client website making the request     * @param string ACID from LAC used to identify account     */    public function __construct( $options )    {        //if ( empty($options["acid"]) ) return;        // URL to Buying Buddy API        $this->baseURL  = "https://www.mbb2.com";        $currentUrl     = $_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"];        $urlParts       = parse_url($currentUrl);        $partsArr       = explode('/',$urlParts["path"]);        $sfolder        = $partsArr[1];        if( !empty($_COOKIE["mbb-mbbid"]) ){            $mbbid = sanitize_text_field($_COOKIE["mbb-mbbid"]);        } else {            $mbbid = $this->createGUID();            setcookie("mbb-mbbid", $mbbid, time()+7200, "/");        }        // Config Options passed via curl        $configOptions = array(            "mbbdomain"     => sanitize_text_field($_SERVER["HTTP_HOST"]),            "page_url"      => sanitize_text_field($urlParts["path"]),            "sfolder"       => $sfolder,            "mbbid"         => $mbbid,            "lacid"         => ( !empty($_COOKIE["mbb-lacid"]) ) ? sanitize_text_field($_COOKIE["mbb-lacid"]) : "",            "mbb_alert"     => ( !empty($_GET["mbb_alert"]) ) ? sanitize_text_field($_GET["mbb_alert"]): "",            "mbb_search"    => ( !empty($_GET["mbb_search"]) ) ? sanitize_text_field($_GET["mbb_search"]): "",            "mbb_debug"     => ( !empty($_GET["mbb_debug"]) ) ? sanitize_text_field($_GET["mbb_debug"]): "false"        );        $this->configOptions = array_merge($configOptions, $options);       // echo "config: ";print_r($this->configOptions);    }    /**     * Create Unique ID (GUID)     * @return string     */    public function createGUID()    {        $id = md5(uniqid());        return $id;    }    /**     * Get Property ID from SEO URL     * @return string property_id     */    public function getPropertyIdFromURL()    {            $url = sanitize_url($_SERVER["REQUEST_URI"]);            $lastSlashPos = strrpos($url, "/")+1;        $slug = substr($url, $lastSlashPos);            $firstDashes = strpos($slug,"--");        $property_id = substr($slug,0,$firstDashes);            return $property_id;        }    /**     * Get HTML for a Buying Buddy Widget (used for SEO)     * @param string $widget_type Widget Type (ie. MBBv3_FeaturedList)     * @param string $widget_page      * @param array Options for the widget including (filter, limit, order, page)     * @return string The widget HTML and javascript is returned     */    public function getWidget( $widget_type, $widgetOptions, $widget_page="index" )    {        $type           = strtolower( str_replace("MBBv3_", "", sanitize_text_field($widget_type)) );        $widget_page    = ( $widget_page ) ? sanitize_text_field($widget_page) : "index";        $url            = "/version3/{$type}/{$widget_page}/json-api/wordpress";        $postData   = array(            "filter"        => ( !empty($widgetOptions["filter"]) ) ? wp_kses_post($widgetOptions["filter"]) : "",            "limit"         => ( !empty($widgetOptions["limit"]) ) ? sanitize_text_field($widgetOptions["limit"]) : "",            "order"         => ( !empty($widgetOptions["order"]) ) ? wp_kses_post($widgetOptions["order"]) : "",            "page"          => ( !empty($widgetOptions["page"]) ) ? sanitize_text_field($widgetOptions["page"]) : "",            "property_id"   => ( !empty($widgetOptions["property_id"]) ) ? sanitize_text_field($widgetOptions["property_id"]) : ""        );        if ( !empty($_GET["market-report"]) ) $postData["market-report"] = wp_kses_post($_GET["market-report"]);                // If results page and cookie exists urlencode cookie and add to post data        if( !empty($_COOKIE["mbb-search-params"]) && empty($_GET["filter"]) && ($type == "listingresults" || $type == "searchresults") ){            $searchCookie =  sanitize_text_field($_COOKIE["mbb-search-params"]);            $postData["searchCookie"] = $searchCookie;        }        return $this->getApiData($url,$postData);    }    /**     * Call MyBuyingBuddy API     * @param string $url URL of API function to call     * @param array $postData Additional parameters to include in API call     * @return array JSON decoded array of data returned from API     */    public function getApiData( $url, $postData=null )    {        // Set the URL and post data        $url = sanitize_url($this->baseURL.$url);        // Merge Post Data With Config Options        // Remove empty values from post array        if (!$this->configOptions) $this->configOptions = array();        $sanitizedData = array();        foreach ($postData as $key => $val) {            $sanitizedData[sanitize_text_field($key)] = wp_kses_post($val);        }        $postFields = array_merge($this->configOptions, $sanitizedData);        // Create the request headers        $request_headers   = array();        $request_headers[] = "Accept: */*";        $request_headers[] = "Host: www.mbb2.com";        $request_headers[] = "Cache-Control: max-age=0";        $request_headers[] = "Connection: keep-alive";        $request_headers[] = "Content-Type: application/json";        $request_headers[] = "Accept-Language: en-US,en;q=0.5";        $args               = array();        $args["method"]     = "POST";        $args["user-agent"]	= $_SERVER['HTTP_USER_AGENT'];        $args["headers"]    = $request_headers;          $args["body"]       = json_encode($postFields);        $curlUrl = "{$url}?1=1";        foreach ( $postFields as $k=>$v ){            if ( $k == "filter" ){ $v = urlencode($v); } else if ( $k != "page_url" ){ $curlUrl .= "&{$k}={$v}"; }        }        $json = wp_remote_post( $url, $args );        // json decode return into php object        if (is_array($json) && !empty($json['body'])) {            $returnObj = json_decode($json["body"]);            if (!empty($returnObj) && $returnObj->success ){                ob_start();                    if ( $returnObj->lacid ){ setcookie("mbb-lacid", sanitize_text_field($returnObj->lacid), time()+3600, "/"); }                ob_end_clean();                if ( is_object($returnObj->data) ) $returnObj->data->curlUrl = $curlUrl;                return $returnObj->data;            } else {                return new stdClass();            }        } else {            return new stdClass();                    }    }}