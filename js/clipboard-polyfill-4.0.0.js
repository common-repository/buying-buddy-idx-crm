var TEXT_PLAIN="text/plain",TEXT_HTML="text/html",debugLogImpl=e=>{};function debugLog(e){debugLogImpl(e)}function setDebugLog(e){debugLogImpl=e}var showWarnings=!0;function suppressWarnings(){showWarnings=!1}function shouldShowWarnings(){return showWarnings}function warnOrLog(){(console.warn||console.log).apply(console,arguments)}var _a,_b,_c,warn=warnOrLog.bind("[clipboard-polyfill]"),originalWindow="undefined"==typeof window?void 0:window,originalGlobalThis="undefined"==typeof globalThis?void 0:globalThis,promiseConstructorImpl=null!=(_c=null==(_a=originalWindow)?void 0:_a.Promise)?_c:null==(_b=originalGlobalThis)?void 0:_b.Promise;function getPromiseConstructor(){if(promiseConstructorImpl)return promiseConstructorImpl;throw new Error("No `Promise` implementation available for `clipboard-polyfill`. Consider using: https://github.com/lgarron/clipboard-polyfill#flat-file-version-with-promise-included")}var _a2,_a3,_a4,_a5,_a6,originalNavigator="undefined"==typeof navigator?void 0:navigator,originalNavigatorClipboard=null==originalNavigator?void 0:originalNavigator.clipboard,originalNavigatorClipboardRead=null==(_a2=null==originalNavigatorClipboard?void 0:originalNavigatorClipboard.read)?void 0:_a2.bind(originalNavigatorClipboard),originalNavigatorClipboardReadText=null==(_a3=null==originalNavigatorClipboard?void 0:originalNavigatorClipboard.readText)?void 0:_a3.bind(originalNavigatorClipboard),originalNavigatorClipboardWrite=null==(_a4=null==originalNavigatorClipboard?void 0:originalNavigatorClipboard.write)?void 0:_a4.bind(originalNavigatorClipboard),originalNavigatorClipboardWriteText=null==(_a5=null==originalNavigatorClipboard?void 0:originalNavigatorClipboard.writeText)?void 0:_a5.bind(originalNavigatorClipboard),originalWindowClipboardItem=null==(_a6=originalWindow)?void 0:_a6.ClipboardItem,promiseConstructor=getPromiseConstructor(),ieWindow=originalWindow;function seemToBeInIE(){return"undefined"==typeof ClipboardEvent&&void 0!==(null==ieWindow?void 0:ieWindow.clipboardData)&&void 0!==(null==ieWindow?void 0:ieWindow.clipboardData.setData)}function writeTextIE(e){e=ieWindow.clipboardData.setData("Text",e);return e&&debugLog("writeTextIE worked"),e}function readTextIE(){var e=ieWindow.clipboardData.getData("Text");if(""===e)throw new Error("Empty clipboard or could not read plain text from clipboard");return e}function copyListener(e,r,o){for(var i in debugLog("listener called"),e.success=!0,r){var t=r[i],n=o.clipboardData;n.setData(i,t),i===TEXT_PLAIN&&n.getData(i)!==t&&(debugLog("setting text/plain failed"),e.success=!1)}o.preventDefault()}function execCopy(e){var r={success:!1},e=copyListener.bind(this,r,e);document.addEventListener("copy",e);try{document.execCommand("copy")}finally{document.removeEventListener("copy",e)}return r.success}function copyUsingTempSelection(e,r){selectionSet(e);e=execCopy(r);return selectionClear(),e}function copyUsingTempElem(e){var r=document.createElement("div"),e=(r.setAttribute("style","-webkit-user-select: text !important"),r.textContent="temporary element",document.body.appendChild(r),copyUsingTempSelection(r,e));return document.body.removeChild(r),e}function copyTextUsingDOM(e){debugLog("copyTextUsingDOM");var r=document.createElement("div"),o=(r.setAttribute("style","-webkit-user-select: text !important"),r),i=(r.attachShadow&&(debugLog("Using shadow DOM."),o=r.attachShadow({mode:"open"})),document.createElement("span")),e=(i.innerText=e,o.appendChild(i),document.body.appendChild(r),selectionSet(i),document.execCommand("copy"));return selectionClear(),document.body.removeChild(r),e}function selectionSet(e){var r,o=document.getSelection();o&&((r=document.createRange()).selectNodeContents(e),o.removeAllRanges(),o.addRange(r))}function selectionClear(){var e=document.getSelection();e&&e.removeAllRanges()}function writeFallback(e){var r=TEXT_PLAIN in e;if(seemToBeInIE()){if(!r)throw new Error("No `text/plain` value was specified.");if(writeTextIE(e[TEXT_PLAIN]))return!0;throw new Error("Copying failed, possibly because the user rejected it.")}return execCopy(e)?(debugLog("regular execCopy worked"),!0):-1<navigator.userAgent.indexOf("Edge")?(debugLog('UA "Edge" => assuming success'),!0):copyUsingTempSelection(document.body,e)?(debugLog("copyUsingTempSelection worked"),!0):copyUsingTempElem(e)?(debugLog("copyUsingTempElem worked"),!0):!!copyTextUsingDOM(e[TEXT_PLAIN])&&(debugLog("copyTextUsingDOM worked"),!0)}function promiseRecordMap(i,e){var r,o=[];for(r in i){var t=i[r];o.push(e(t))}return promiseConstructor.all(o).then(e=>{for(var r={},o=0;o<i.length;o++)r[i[o]]=e[o];return r})}var voidPromise=promiseConstructor.resolve(),truePromiseFn=()=>promiseConstructor.resolve(!0),falsePromise=promiseConstructor.resolve(!1);function rejectThrownErrors(o){return new promiseConstructor((e,r)=>{try{e(o())}catch(e){r(e)}})}function stringToStringItem(e){var r={};return r[TEXT_PLAIN]=e,r}function writeText(e){return rejectThrownErrors(()=>originalNavigatorClipboardWriteText?(debugLog("Using `navigator.clipboard.writeText()`."),originalNavigatorClipboardWriteText(e).catch(writeTextStringFallback)):promiseConstructor.resolve(writeTextStringFallback(e)))}function writeTextStringFallback(e){if(!writeFallback(stringToStringItem(e)))throw new Error("writeText() failed")}function readText(){return rejectThrownErrors(()=>{if(originalNavigatorClipboardReadText)return debugLog("Using `navigator.clipboard.readText()`."),originalNavigatorClipboardReadText();var e;if(seemToBeInIE())return e=readTextIE(),promiseConstructor.resolve(e);throw new Error("Read is not supported in your browser.")})}function hasItemWithType(e,r){for(var o in e)if(-1!==e[o].types.indexOf(r))return!0;return!1}function ClipboardItemPolyfillImpl(e,r){var o,i=Object.keys(e),t={};for(o in e){var n=e[o];t[o]="string"==typeof n?stringToBlob(o,n):n}return{types:i,presentationStyle:null!=(i=null==r?void 0:r.presentationStyle)?i:"unspecified",getType:function(e){return promiseConstructor.resolve(t[e])}}}var ClipboardItemPolyfill=ClipboardItemPolyfillImpl;function stringToBlob(e,r){return new Blob([r],{type:e})}function blobToString(e){return new promiseConstructor((r,o)=>{var i=new FileReader;i.addEventListener("load",()=>{var e=i.result;"string"==typeof e?r(e):o("could not convert blob to string")}),i.readAsText(e)})}function clipboardItemToGlobalClipboardItem(o){return promiseRecordMap(o.types,function(e){return o.getType(e)}).then(e=>{var r={};return o.presentationStyle&&(r.presentationStyle=o.presentationStyle),new originalWindowClipboardItem(e,r)})}function textToClipboardItem(e){var r={};return r[TEXT_PLAIN]=stringToBlob(e,TEXT_PLAIN),new ClipboardItemPolyfill(r)}function getTypeAsString(e,r){return e.getType(r).then(e=>blobToString(e))}function toStringItem(r){return promiseRecordMap(r.types,function(e){return getTypeAsString(r,e)})}function write(o){return rejectThrownErrors(()=>{var r;return originalNavigatorClipboardWrite&&originalWindowClipboardItem?(r=originalNavigatorClipboardWrite,debugLog("Using `navigator.clipboard.write()`."),promiseConstructor.all(o.map(clipboardItemToGlobalClipboardItem)).then(e=>r(e).then(truePromiseFn).catch(e=>{if(hasItemWithType(o,TEXT_PLAIN)||hasItemWithType(o,TEXT_HTML))return falsePromise;throw e}))):falsePromise}).then(e=>{if(e)return voidPromise;e=hasItemWithType(o,TEXT_PLAIN);return shouldShowWarnings()&&!e&&debugLog("clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call suppressWarnings() to suppress this warning."),toStringItem(o[0]).then(e=>{if(!writeFallback(e))throw new Error("write() failed")})})}function read(){return rejectThrownErrors(()=>originalNavigatorClipboardRead?(debugLog("Using `navigator.clipboard.read()`."),originalNavigatorClipboardRead()):readText().then(e=>[textToClipboardItem(e)]))}export{ClipboardItemPolyfill as ClipboardItem,read,readText,setDebugLog,suppressWarnings,write,writeText};